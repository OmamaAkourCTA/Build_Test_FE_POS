{"version":3,"file":"src_app_auth_forgot-password_forgot-password_module_ts.js","mappings":"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","sources":["./src/app/auth/forgot-password/forgot-password-routing.module.ts","./src/app/auth/forgot-password/forgot-password.component.html","./src/app/auth/forgot-password/forgot-password.component.ts","./src/app/auth/forgot-password/forgot-password.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\nconst routes: Routes = [{ path: '', component: ForgotPasswordComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ForgotPasswordRoutingModule { }\n","<div class=\"page-login\">\n  <div class=\"container-fluid px-0 mx-0\">\n    <div class=\"row px-0 mx-0\">\n      <div class=\"col-md-6 col-sm-12 px-0 mx-0\">\n        <div class=\"card-login \" *ngIf=\"!isCheckMail\">\n          <img src=\"assets/images/markazia.png\" alt=\"logo\">\n          <div class=\"log-text\">\n            <h3>Forgot Password</h3>\n            <p>Enter the email you used to create your <br>\n              account so we can send you instructions on <br>\n              how to reset your password.</p>\n          </div>\n          <form [formGroup]=\"authForm\" (ngSubmit)=\"submit()\">\n            <div class=\"form-group\">\n              <label>Email </label>\n              <div>\n                <input type=\"text\" formControlName=\"email\" name=\"email\" placeholder=\"example@markazia.jo\"\n                  class=\"form-control\" pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{1,3}$\" required />\n                <div\n                  *ngIf=\"submitted && formValid['email'].invalid && (formValid['email'].dirty || formValid['email'].touched)\"\n                  class=\"ng-dirty\">\n                  <span class=\"error\" *ngIf=\"formValid['email'].errors['required']\">\n                    This element is required, please fill.</span>\n                  <span [hidden]=\"authForm.get('email').value == ''\">\n                    <span class=\"error\" *ngIf=\"formValid['email'].errors\"> the email you entered is incorrect.</span>\n                  </span>\n                </div>\n              </div>\n\n            </div>\n\n            <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"errorMessage\">\n              {{errorMessage}}\n            </div>\n\n            <div>\n              <button type=\"submit\" class=\"btn btn-login\" *ngIf=\"!isLoading\">Send</button>\n              <button type=\"button\" class=\"btn btn-login\" *ngIf=\"isLoading\" disabled><i\n                class=\"fa-solid fa-circle-notch fa-spin\"></i></button>\n            </div>\n\n            <div>\n              <button type=\"button\" class=\"btn btn-back\" routerLink=\"/login\"> <i\n                  class=\"fa-solid fa-arrow-left-long px-2\"></i> Back\n              </button>\n            </div>\n          </form>\n        </div>\n        <div class=\"card-login \" *ngIf=\"isCheckMail\">\n          <img src=\"assets/images/markazia.png\" alt=\"logo\">\n          <div class=\"log-text\">\n            <h3>Check your Email</h3>\n            <p>Please check the email address\n              {{starEmail}} for instructions to reset\n              your password.</p>\n            <p> Didn't receive the email? Check spam </p>\n          </div>\n\n          <div class=\"or-line\">\n            <h6> OR </h6>\n          </div>\n\n          <div>\n            <button type=\"button\" (click)=\"submit()\" *ngIf=\"!isLoading\" class=\"btn btn-login\"\n              [disabled]=\"!isResendActive\">\n              Resend Email\n            </button>\n          </div>\n          <button type=\"button\" class=\"btn btn-login\" *ngIf=\"isLoading\" disabled><i\n              class=\"fa-solid fa-circle-notch fa-spin\"></i></button>\n\n          <div class=\"seconds\">\n            <h4> Resend Again within <span>{{seconds60}}</span> </h4>\n          </div>\n          <div>\n            <button type=\"button\" class=\"btn btn-back\" routerLink=\"/login\"> <i\n                class=\"fa-solid fa-arrow-left-long px-2\"></i> Back\n            </button>\n          </div>\n        </div>\n\n      </div>\n      <div class=\"col-md-6 col-sm-12 px-0 mx-0\">\n        <div class=\"bg-image\">\n          <img src=\"assets/images/loginLogo.png\" alt=\"\">\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HeaderService } from '../../services/header.service';\nimport { AuthService } from '../services/auth.service';\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent {\n  authForm: FormGroup;\n  isCheckMail: boolean;\n  submitted: boolean = false;\n  errorMessage: string;\n  myEmail: string;\n  starEmail: string;\n  isLoading: boolean;\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private fb: FormBuilder,\n    public headerService: HeaderService\n  ) {}\n\n  ngOnInit(): void {\n    this.getFormData();\n  }\n\n  getFormData() {\n    this.authForm = this.fb.group({\n      email: [''],\n    });\n  }\n  get formValid(): { [key: string]: AbstractControl } {\n    return this.authForm.controls;\n  }\n  submit() {\n    this.submitted = true;\n    this.isLoading = true;\n    this.isResendActive = false;\n\n    this.errorMessage = '';\n    console.log(this.submitted);\n    if (this.authForm.invalid) {\n      this.isLoading = false;\n      return window.scroll(0, 0);\n    }\n    this.authService\n      .ForgetPassword({}, this.authForm.value.email)\n      .subscribe((response: any) => {\n        if (response.isSuccess == true) {\n          console.log(response);\n          this.isLoading = false;\n\n          this.myEmail = this.authForm.value.email;\n          this.isCheckMail = true;\n\n          let email = this.authForm.value.email;\n          let firstChar = email.substring(0, 1);\n          let domain = email.substring(\n            email.indexOf('@') + 1,\n            email.indexOf('.')\n          );\n          let dot = email.substring(email.indexOf('.'));\n          let lastChar = email.substring(\n            email.indexOf('@') - 1,\n            email.indexOf('@')\n          );\n          let dFirstChar = domain.substring(0, 1);\n          let dLastChar = domain.slice(-1);\n\n          this.starEmail =\n            firstChar +\n            '*****' +\n            lastChar +\n            '@' +\n            dFirstChar +\n            '*****' +\n            dLastChar +\n            dot;\n          console.log(this.starEmail);\n\n          this.TickTock();\n        } else {\n          this.isLoading = false;\n          this.errorMessage = response.Errors[0].ErrorMessageEn;\n\n          setTimeout(() => {\n            this.errorMessage = '';\n          }, 3000);\n        }\n      });\n  }\n  public seconds60: number = 60;\n  public tickTock: any;\n  isResendActive: boolean;\n  TickTock() {\n    this.isResendActive = false;\n\n    this.seconds60 = 60;\n    this.tickTock = setInterval(() => {\n      this.seconds60 = this.seconds60 - 1;\n      // this.seconds.nativeElement.innerText = this.seconds60;\n      if (this.seconds60 == 0) {\n        clearInterval(this.tickTock);\n        this.isResendActive = true;\n      }\n    }, 1000);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ForgotPasswordRoutingModule } from './forgot-password-routing.module';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  declarations: [ForgotPasswordComponent],\n  imports: [CommonModule, ForgotPasswordRoutingModule, SharedModule],\n})\nexport class ForgotPasswordModule {}\n"],"names":["RouterModule","ForgotPasswordComponent","routes","path","component","ForgotPasswordRoutingModule","forChild","imports","exports","i0","constructor","authService","router","route","fb","headerService","ngOnInit","getFormData","authForm","group","email","formValid","controls","submit","submitted","isLoading","isResendActive","errorMessage","console","log","invalid","window","scroll","ForgetPassword","value","subscribe","response","isSuccess","myEmail","isCheckMail","firstChar","substring","domain","indexOf","dot","lastChar","dFirstChar","dLastChar","slice","starEmail","TickTock","Errors","ErrorMessageEn","setTimeout","seconds60","tickTock","setInterval","clearInterval","selectors","decls","vars","consts","template","CommonModule","SharedModule","ForgotPasswordModule","declarations"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}