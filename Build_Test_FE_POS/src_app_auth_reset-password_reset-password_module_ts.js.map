{"version":3,"file":"src_app_auth_reset-password_reset-password_module_ts.js","mappings":"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","sources":["./src/app/auth/reset-password/modal-reset/modal-reset.component.ts","./src/app/auth/reset-password/modal-reset/modal-reset.component.html","./src/app/auth/reset-password/reset-password-routing.module.ts","./src/app/auth/reset-password/reset-password.component.ts","./src/app/auth/reset-password/reset-password.component.html","./src/app/auth/reset-password/reset-password.module.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap';\n@Component({\n  selector: 'app-modal-reset',\n  templateUrl: './modal-reset.component.html',\n  styleUrls: ['./modal-reset.component.scss'],\n})\nexport class ModalResetComponent {\n  @Input() name;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private modalService: NgbModal,\n    private router: Router\n  ) {}\n  ngOnInit(): void {\n    console.log(this.name);\n\n    // setTimeout(() => {\n    //   this.modalService.dismissAll();\n    //   this.router.navigateByUrl('/login');\n    // }, 5000);\n  }\n\n  login() {\n    this.modalService.dismissAll();\n    this.router.navigateByUrl('/login');\n  }\n}\n","<div class=\"modal-body\">\n  <div class=\"message\">\n    <i class=\"fa-regular fa-circle-check\"></i>\n    <h3>Password reset successfully.</h3>\n\n    <button class=\"btn\" (click)=\"login()\"> Login </button>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ResetPasswordComponent } from './reset-password.component';\n\nconst routes: Routes = [{ path: '', component: ResetPasswordComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ResetPasswordRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ToastrService } from 'ngx-toastr';\nimport { HttpserviceService } from 'src/app/services/httpservice.service';\nimport { UtilityServiceService } from 'src/app/services/utility-service.service';\nimport { faUser, faEye, faEyeSlash } from '@fortawesome/free-regular-svg-icons';\nimport { HeaderService } from '../../services/header.service';\nimport { ConnectionService, ConnectionState } from 'ng-connection-service';\nimport { Subscription, tap } from 'rxjs';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalResetComponent } from './modal-reset/modal-reset.component';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss'],\n})\nexport class ResetPasswordComponent {\n  formData: FormGroup;\n  submitted: boolean;\n  faUser = faUser;\n  faEye = faEye;\n  faEyeSlash = faEyeSlash;\n  IsshowPassword: boolean = false;\n\n  errorMessage: any;\n  userId: any;\n  isLinkExpire: boolean;\n  // status!: string;\n  currentState!: ConnectionState;\n  subscription = new Subscription();\n  status = 'ONLINE';\n  isConnected = true;\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private fb: FormBuilder,\n    public headerService: HeaderService,\n    private connectionService: ConnectionService,\n    private route: ActivatedRoute,\n    private modalService: NgbModal\n  ) {}\n\n  ngOnInit(): void {\n    this.getData();\n    this.route.queryParams.subscribe((params) => {\n      this.userId = params['userId'];\n      this.TestEmailLinkExpiration();\n    });\n  }\n\n  getData() {\n    this.formData = this.fb.group({\n      userId: [''],\n      password: [''],\n      passwordConfirm: [''],\n    });\n  }\n  get formValid(): { [key: string]: AbstractControl } {\n    return this.formData.controls;\n  }\n\n  TestEmailLinkExpiration() {\n    this.authService\n      .TestEmailLinkExpiration({}, this.userId)\n      .subscribe((response: any) => {\n        if (response.isSuccess == true) {\n          this.isLinkExpire = false;\n          console.log(response);\n        } else {\n          this.isLinkExpire = true;\n        }\n      });\n  }\n\n  submit() {\n    this.submitted = true;\n    this.errorMessage = '';\n    this.formData.get('userId').setValue(this.userId);\n    this.formData\n      .get('passwordConfirm')\n      .setValue(this.formData.get('password').value);\n\n    if (this.formData.invalid) {\n      return window.scroll(0, 0);\n    }\n\n    this.authService\n      .ResetPassword(this.formData.value)\n      .subscribe((response: any) => {\n        if (response.isSuccess == true) {\n          const modalRef = this.modalService.open(ModalResetComponent);\n          modalRef.componentInstance.name = 'edit';\n        } else {\n          this.errorMessage = response.Errors[0].ErrorMessageEn;\n        }\n      });\n  }\n\n  openModal() {\n    const modalRef = this.modalService.open(ModalResetComponent);\n    modalRef.componentInstance.name = 'edit';\n  }\n\n  showPassword() {\n    this.IsshowPassword = this.IsshowPassword == false ? true : false;\n  }\n}\n","<div class=\"page-login\">\n  <div class=\"container-fluid px-0 mx-0\">\n    <div class=\"row px-0 mx-0\">\n      <div class=\"col-md-6 col-sm-12 px-0 mx-0\">\n        <div class=\"card-login\">\n          <img src=\"assets/images/markazia.png\" alt=\"logo\">\n          <div class=\"log-text\">\n            <h3>Reset Password</h3>\n            <p>Choose a new password for your account.</p>\n          </div>\n          <div *ngIf=\"!isLinkExpire\">\n            <form [formGroup]=\"formData\" (ngSubmit)=\"submit()\">\n\n              <div class=\"form-group\">\n                <label>Password</label>\n                <div>\n                  <input [type]=\"IsshowPassword ? 'text' : 'password'\" formControlName=\"password\" nsme=\"password\"\n                    class=\"form-control\" placeholder=\"Enter your new password\" required min=\"8\" max=\"16\" minlength=\"8\"\n                    maxlength=\"16\" autocomplete=\"off\">\n                  <div class=\"passicon\">\n                    <fa-icon (click)=\"showPassword()\" *ngIf=\"!IsshowPassword\" class=\"custom-search-botton\"\n                      [icon]=\"faEye\"></fa-icon>\n                    <fa-icon (click)=\"showPassword()\" *ngIf=\"IsshowPassword\" class=\"custom-search-botton\"\n                      [icon]=\"faEyeSlash\"></fa-icon>\n                  </div>\n                </div>\n                <div\n                  *ngIf=\"submitted && formValid['password'].invalid ||  formValid['password'].invalid && (formValid['password'].dirty || formValid['password'].touched)\"\n                  class=\"ng-dirty\">\n                  <span class=\"error\" *ngIf=\"formValid['password'].errors['required']\"> This element is required,\n                    please fill.</span>\n                  <div *ngIf=\"formValid['password'].errors['minlength']\">\n                    <span class=\"error\">Password cannot be less than 8 characters </span>\n                  </div>\n                </div>\n                <!-- <h1> {{formGroup.get('Password').value.length}} </h1> -->\n                <div [hidden]=\"formData.get('password').value.length < 5\">\n                  <span class=\"error\" *ngIf=\"formData.get('password').hasError('strong')\">\n                    Password should contain a minimum combination of 1 uppercase letter, 1 lowercase letter, 1 number,\n                    and\n                    1 symbol</span>\n                </div>\n              </div>\n\n              <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"errorMessage\">\n                {{errorMessage}}\n              </div>\n              <div>\n                <button type=\"submit\" class=\"btn btn-login\">Reset Password</button>\n              </div>\n            </form>\n          </div>\n          <div *ngIf=\"isLinkExpire\">\n            <br>\n            <h3 class=\"text-center\">\n              Linked Expired\n            </h3>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-6 col-sm-12 px-0 mx-0\">\n        <div class=\"bg-image\">\n          <img src=\"assets/images/loginLogo.png\" alt=\"\">\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ResetPasswordRoutingModule } from './reset-password-routing.module';\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { ModalResetComponent } from './modal-reset/modal-reset.component';\n\n\n@NgModule({\n  declarations: [\n    ResetPasswordComponent,\n    ModalResetComponent\n  ],\n  imports: [\n    CommonModule,\n    ResetPasswordRoutingModule,\n    SharedModule,\n\n  ]\n})\nexport class ResetPasswordModule { }\n"],"names":["ModalResetComponent","constructor","activeModal","modalService","router","ngOnInit","console","log","name","login","dismissAll","navigateByUrl","selectors","inputs","decls","vars","consts","template","i0","ctx","RouterModule","ResetPasswordComponent","routes","path","component","ResetPasswordRoutingModule","forChild","imports","exports","faUser","faEye","faEyeSlash","Subscription","authService","fb","headerService","connectionService","route","getData","queryParams","subscribe","params","userId","TestEmailLinkExpiration","formData","group","password","passwordConfirm","formValid","controls","response","isSuccess","isLinkExpire","submit","submitted","errorMessage","get","setValue","value","invalid","window","scroll","ResetPassword","modalRef","open","componentInstance","Errors","ErrorMessageEn","openModal","showPassword","IsshowPassword","CommonModule","SharedModule","ResetPasswordModule","declarations"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}